openapi: 3.0.1
info:
  title: part 1
  description: part 1
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: authors
    description: Operations about authors
  - name: books
    description: Operations about books
  - name: orders
    description: Operations about orders
paths:
  /authors:
    get:
      tags:
        - authors
      summary: Get all authors
      operationId: listAuthors
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '404':
          description: Invalid input
    post:
      tags:
        - authors
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid input
  /authors/{id}:
    get:
      tags:
        - authors
      summary: Get an author by ID
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          description: ID of the author to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
    put:
      tags:
        - authors
      summary: Update an existing author
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          description: ID of the author to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: successful operation
        '404':
          description: Author not found
    delete:
      tags:
        - authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          description: ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid ID provided
        '404':
          description: Author not found
  /authors/{id}/books:
    get:
      tags:
        - authors
      summary: Get all books written by a specific author
      operationId: listBooksByAuthor
      parameters:
        - name: id
          in: path
          description: ID of the author to get
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books:
    get:
      tags:
        - books
      summary: Get all books
      operationId: listBooks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - books
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: created
        '400':
          description: bad request
  /books/{ISBN}:
    get:
      tags:
        - books
      summary: Get book by the ISBN
      operationId: getBookByISBN
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book to get
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      tags:
        - books
      summary: Update an existing book
      operationId: updateBook
      parameters:
        - name: ISBN
          in: path
          description: ISBN of book to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        default:
          description: Successful operation
    delete:
      tags:
        - books
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - name: ISBN
          in: path
          description: ISBN of book to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ISBN supplied
        '404':
          description: Book not found
  /books/{ISBN}/authors:
    get:
      tags:
        - books
      summary: List all authors of a specific book
      operationId: listAuthorsOfBook
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
  /books/{ISBN}/orders:
    get:
      tags:
        - books
      summary: Get all orders containing a specific book
      operationId: listOrdersOfBook
      parameters:
        - name: ISBN
          in: path
          description: ISBN of the book
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Book not found or has no orders
  /orders:
    get:
      tags:
        - orders
      summary: List all orders
      operationId: listOrders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Not found
    post:
      tags:
        - orders
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Successful operation
        '400':
          description: Bad Request
  /orders/{id}:
    get:
      tags:
        - orders
      summary: Get an order by ID
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      tags:
        - orders
      summary: Update an existing order
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful operation
        '404':
          description: Not found
  /orders/{id}/books:
    get:
      tags:
        - orders
      summary: Get all books in an order
      operationId: listBooksInOrder
      parameters:
        - name: id
          in: path
          description: ID of the order
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '204':
          description: No Content
    post:
      tags:
        - orders
      summary: Add a book to an existing order
      operationId: addBookToOrder
      parameters:
        - name: id
          in: path
          description: ID of the order
          required: true
          schema:
            type: integer
      requestBody:
        description: ISBN of the book to add to the order
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ISBN:
                  type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
  /orders/{id}/books/{ISBN}:
    delete:
      tags:
        - orders
      summary: Remove a book from an existing order
      operationId: removeBookFromOrder
      parameters:
        - name: id
          in: path
          description: ID of the order
          required: true
          schema:
            type: integer
        - name: ISBN
          in: path
          description: ISBN of the book to remove from the order
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: George Orwell
        birthyear:
          type: integer
          format: int32
          example: 1903
        nationality:
          type: string
          example: English
    Book:
      type: object
      properties:
        ISBN:
          type: string
          example: 978-3-16-148410-0
        title:
          type: string
          example: 1984
        publicationYear:
          type: integer
          format: int32
          example: 1949
        price:
          type: number
          format: double
          example: 10.99
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 16
        datetime:
          type: string
          format: date-time
        customerName:
          type: string
          example: John Doe